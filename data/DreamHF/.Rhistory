###############################################################################
# Get validation scores for univariate models and calculate Harrellc
predict.uni <- function(univ_models, test.df, filename){
print("Validation scores of Cox model in test or validation data")
# Validation *****************************
for (i in predictors){
scores=as.data.frame(predict(univ_models[[i]],
newdata=test.df,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID")
univ_models[[i]]$scores <- scores
# Validation *****************************
# Read the real labels that were hidden from that algorithm
labels <- test.df
labels$SampleID<- rownames(test.df)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
print(HarrellC["C Index"])
univ_models[[i]]$HarrellC <- HarrellC["C Index"]
}
return(univ_models)
}
# Validation of univariate cox model in TEST and VALIDATION cohorts ************
univ_models_ontest <- predict.uni(univ_models, df.test, "ontest")
univ_models_onval <- predict.uni(univ_models, df.val, "onvalidation")
save(cox.mod.sex, cox.mod.total.meta, univ_models_ontest, univ_models_onval,
file=paste0(PARAM$folder.result, "univ_models.RData"))
# Multivariate models **********************************************************
model.list <- list(cox_subset = cox.mod.sex,
cox_meta_total = cox.mod.total.meta)
collect.hoslem <- data.frame()
for (model in model.list){
print(model$formula)
pred <- Coxar(model, years=10, bh=NULL)
test <- HosLem.test(model$y, pred, plot=FALSE)
p.val <-  test$pval
collect.hoslem <- rbind(collect.hoslem, p.val)
colnames(collect.hoslem) <- "p.val"
}
rownames(collect.hoslem) <- names(model.list)
collect.hoslem$p.adj <- p.adjust(collect.hoslem$p.val)
# export file
write.csv(collect.hoslem, file=paste0(PARAM$folder.result,
Sys.Date(),"_",
"Hosmer_lemesrow_scores.csv"))
# Hosmer lemesrow test based on library(ResourceSelection)**********************
library(ResourceSelection)
library(GGally)
predict.uni <- function(univ_models, test.df, filename){
print("Validation scores of Cox model in test or validation data")
# Validation *****************************
for (i in predictors){
scores=as.data.frame(predict(univ_models[[i]],
newdata=test.df,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID") %>%
drop_na()
# normalize range from 0-1
univ_models[[i]]$scores <- scores
print(i)
# Validation *****************************
# Read the real labels that were hidden from that algorithm
labels <- test.df
labels$SampleID <- rownames(test.df)
# normalize the scores btw 0-1
range01 <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
labels$Event_time = range01(labels$Event_time)
# only apply 0-1 when it is not all 0s
if (length(unique(scores$Score))==1){
scores$Score=scores$Score
} else {
scores$Score = range01(scores$Score)
}
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
print(HarrellC["C Index"])
univ_models[[i]]$HarrellC <- HarrellC["C Index"]
# hoslem test from
if (length(unique(scores$Score))==1){
univ_models[[i]]$Hoslem.pval.rs <- "untested"
} else {
test <- hoslem.test(true.scores, scores$Score) # x numeric observations, y expected values.
print(test)
univ_models[[i]]$Hoslem.pval.rs <- test$p.value
}
# test <- hoslem.test(true.scores, scores$Score) # x numeric observations, y expected values.
# print(test)
# univ_models[[i]]$Hoslem.pval.rs <- test$p.value
uni.models.rs=univ_models
}
return(uni.models.rs)
}
# Validation of univariate cox model in TEST and VALIDATION cohorts ************
univ_models_ontest <- predict.uni(univ_models, df.test, "ontest_rs")
univ_models_onval <- predict.uni(univ_models, df.val, "onvalidation_rs")
###############################################################################
# Random survival forest********************************************************
set.seed(9876)
# Labels are given for parameter optimization
dff1 <- as.data.frame(data[, c(endpoints, predictors)])
rownames(dff1)<-NULL
# Labels are hidden for the second data subset
dff2 <- as.data.frame(df.test[, predictors])
rownames(dff2)<-NULL
# Train Random Survival Model with the labeled training data
rf1 <- rfsrc(Surv(Event_time, Event) ~ .,
data = dff1,
importance = FALSE)
# Predictions for the test data
samples <- which(rowSums(is.na(dff2))==0)
pred2 <- predict(rf1, dff2[samples, ])
scores <- pred2$predicted; names(scores) <- rownames(df.test)[samples]
res <- data.frame(SampleID=rownames(df.test),
Score=sample(scores[rownames(df.test)]))  # Fully random
res <- res %>%  drop_na()
# Write the scoring table for evaluation
write.csv(res, file=paste0(PARAM$folder.result,
Sys.Date(),
"random_forest_scores.csv"),
quote=FALSE, row.names=FALSE)
# Harrells C *******************************************************************
labels=data
labels$SampleID<- rownames(data)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[res$SampleID,"Event_time"])
# Calculate Harrell's C statistics
C <- Hmisc::rcorr.cens(res$Score, true.scores, outx=FALSE)
print(C)
Cindex.train <- get.cindex(rf1$yvar[,1], rf1$yvar[,2], rf1$predicted.oob)
# Hoslem test *****************************************************************
test.rs <- hoslem.test(true.scores, res$Score) # x numeric observations, y expected values.
#with aki code
pred <- Coxar(model, years=10, bh=NULL)
test <- HosLem.test(model$y, pred, plot=FALSE)
#combine all
stats_rfs <- data.frame(harrellc = C[[1]],
harrellc.train = Cindex.train,
hosLem.pval = test$pval,
hoslemrs.pval= test.rs$p.value)
# export stats
write.csv(stats_rfs, file=paste0(PARAM$folder.result,
Sys.Date(),
"random_forest_stats.csv"))
# plot rfs
pdf(paste0(PARAM$folder.result, "Variable Importance RSF.pdf"),
width = 10,
height = 20)
jk.obj <- subsample(rf1)
par(oma = c(0.5, 10, 0.5, 0.5))
par(cex.axis = 2.0,
cex.lab = 2.0,
cex.main = 2.0,
mar = c(6.0,17,1,1),
mgp = c(4, 1, 0))
plot(jk.obj, xlab = "Variable Importance (x 100)", cex = 1.2)
dev.off()
# plot cox
# Create the new data
sex_df <- with(data,
data.frame(Sex = c(0, 1),
Age = rep(mean(Age, na.rm = TRUE), 2)))
library(survminer)
fit <- survfit(cox.mod.sex, newdata =sex_df)
ggsurvplot(fit, conf.int = TRUE, data = data,palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
ggsurvplot(fit, conf.int = FALSE, data = data,palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
fit <- survfit(cox.mod.sex, newdata =sex_df)
ggsurvplot(fit, conf.int = FALSE,  palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
a=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
a
a
plot.agesex=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
ggsave(plot.agesex, file=paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"))
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), print(survp))
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), print(plot.agesex))
PARAM$folder.result
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), print(plot.agesex))
plot.agesex=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), print(plot.agesex))
plot.agesex
plot.agesex
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), print(plot.agesex))
survp=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
pdf("survplot.pdf")
print(survp, newpage = FALSE)
dev.off()
pdf(paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"))
print(survp, newpage = FALSE)
dev.off()
pdf(paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"))
print(survp$plot, newpage = FALSE)
dev.off()
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), plot.agesex$plot)
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), plot.agesex$plot)
fit <- survfit(cox.mod.total.meta, newdata = sex_df)
survp=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
fit <- survfit(cox.mod.total.meta, newdata = data)
survp=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0.7,1))
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.metatotal.pdf"), plot.agesex$plot)
survp=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv", ylim=c(0,1))
fit <- survfit(cox.mod.sex, newdata = sex_df)
# plot cox
# Create the new data
sex_df <- with(data,
data.frame(Sex = c(0, 1),
Age = rep(mean(Age, na.rm = TRUE), 2)))
fit <- survfit(cox.mod.sex, newdata = sex_df)
survp=ggsurvplot(fit, conf.int = FALSE, data = sex_df, palette = "Dark2",
censor = FALSE, surv.median.line = "hv")
ggsave(file = paste0(PARAM$folder.result,
Sys.Date(), "_",
"ggsurvplot.age_sex.pdf"), plot.agesex$plot)
cox.mod.sex$score
cox.mod.sex$y
scores=as.data.frame(predict(cox.mod.sex,
newdata=test.df,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores=as.data.frame(predict(cox.mod.sex,
newdata=df.test,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
View(scores)
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID")
labels <- df.test
labels$SampleID<- rownames(df.test)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
Harre
# Calculate Harrell's C statistics
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
print(HarrellC["C Index"])
###############################################################################
# Calculate HarrelC and Hoslem
calculate_scores_cox <- function(model, test.df){
scores=as.data.frame(predict(model,
newdata=test.df,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID")
labels <- test.df
labels$SampleID<- rownames(test.df)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
print(HarrellC["C Index"])
}
stats_rfs
# Multivariate models **********************************************************
# Calculate HarrelC
model.list <- list(cox_subset = cox.mod.sex,
cox_meta_total = cox.mod.total.meta)
collect.harrelc <- data.frame()
# Multivariate models **********************************************************
# Calculate HarrelC
model.list <- list(cox_subset = cox.mod.sex,
cox_meta_total = cox.mod.total.meta)
collect.harrelc <- data.frame()
for (model in model.list){
scores=as.data.frame(predict(model,
newdata=df.test,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID")
labels <- df.test
labels$SampleID<- rownames(df.test)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
collect.harrelc <- rbind(collect.harrelc, HarrellC["C Index"])
colnames(collect.hoslem) <- "HarrellC"
}
collect.harrelc <- data.frame()
for (model in model.list){
scores=as.data.frame(predict(model,
newdata=df.test,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID")
labels <- df.test
labels$SampleID<- rownames(df.test)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
collect.harrelc <- rbind(collect.harrelc, HarrellC["C Index"])
colnames(collect.harrelc) <- "HarrellC"
}
rownames(collect.harrelc) <- names(model.list)
View(collect.harrelc)
totalscores <-cbind(collect.harrelc, collect.hoslem)
View(totalscores)
collect.harrelc
collect.hoslem
# export file
write.csv(collect.hoslem, file=paste0(PARAM$folder.result,
Sys.Date(),"_",
"cox_scores.csv"))
collect.harrelc <- data.frame()
collect.hoslem <- data.frame()
for (model in model.list){
scores=as.data.frame(predict(model,
newdata=df.test,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID")
labels <- df.test
labels$SampleID<- rownames(df.test)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
collect.harrelc <- rbind(collect.harrelc, HarrellC["C Index"])
colnames(collect.harrelc) <- "HarrellC"
# Calculate Hoslem
print(model$formula)
pred <- Coxar(model, years=10, bh=NULL)
test <- HosLem.test(model$y, pred, plot=FALSE)
p.val <-  test$pval
collect.hoslem <- rbind(collect.hoslem, p.val)
colnames(collect.hoslem) <- "p.val"
}
rownames(collect.hoslem) <- names(model.list)
collect.hoslem$p.adj <- p.adjust(collect.hoslem$p.val)
rownames(collect.harrelc) <- names(model.list)
totalscores <-cbind(collect.harrelc, collect.hoslem)
View(totalscores)
# Calculate Hoslem
print(model$formula)
for (model in model.list){
print(model$formula)
scores=as.data.frame(predict(model,
newdata=df.test,
# the expected number of events given the covariates and follow-up time
se.type="expected"))
scores = scores %>%
set_colnames(c("Score")) %>%
rownames_to_column(var = "SampleID")
labels <- df.test
labels$SampleID<- rownames(df.test)
# Align the user provided scores with the true event times
true.scores <- as.numeric(labels[scores$SampleID,"Event_time"])
# Calculate Harrell's C statistics
# Calculate Harrell's C statistics
HarrellC <- Hmisc::rcorr.cens(scores$Score, true.scores, outx=FALSE)
collect.harrelc <- rbind(collect.harrelc, HarrellC["C Index"])
colnames(collect.harrelc) <- "HarrellC"
# Calculate Hoslem
pred <- Coxar(model, years=10, bh=NULL)
test <- HosLem.test(model$y, pred, plot=FALSE)
p.val <-  test$pval
collect.hoslem <- rbind(collect.hoslem, p.val)
colnames(collect.hoslem) <- "p.val"
}
plot.survival(rfsrc(Surv(Surv(Event_time, Event) ~ ., data), cens.model = "rfsrc")
)
plot.survival(rfsrc(Surv(Event_time, Event) ~ ., data), cens.model = "rfsrc")
plot.survival(rfsrc(Surv(Event_time, Event) ~ ., data), cens.model = "rfsrc")
plot.survival(rfsrc(Surv(Event_time, Event) ~ ., dff1), cens.model = "rfsrc")
plot.survival(rf1, cens.model = "rfsrc")
plot.survival(rf2, cens.model = "rfsrc")
plot.rsf <- plot.survival(rf1, cens.model = "rfsrc")
plot.rsf
par(oma = c(0.5, 10, 0.5, 0.5))
par(cex.axis = 2.0,
cex.lab = 2.0,
cex.main = 2.0,
mar = c(6.0,17,1,1),
mgp = c(4, 1, 0))
plot.survival(rf1, cens.model = "rfsrc")
par(oma = c(0.5, 10, 0.5, 0.5))
plot.survival(rf1, cens.model = "rfsrc")
par(oma = c(0.5, 0.5, 0.5, 0.5))
plot.survival(rf1, cens.model = "rfsrc")
dev.off()
pdf(paste0(PARAM$folder.result, "RSF_overview.pdf"),
width = 10,
height = 20)
par(oma = c(0.5, 0.5, 0.5, 0.5))
plot.survival(rf1, cens.model = "rfsrc")
dev.off()
pdf(paste0(PARAM$folder.result, "RSF_overview.pdf"),
width = 10,
height = 50)
par(oma = c(0.5, 0.5, 0.5, 0.5))
plot.survival(rf1, cens.model = "rfsrc")
dev.off()
pdf(paste0(PARAM$folder.result, "RSF_overview.pdf"),
width = 10,
height = 50)
par(oma = c(0.5, 0.5, 0.5, 0.5))
plot.survival(rf1, cens.model = "rfsrc")
dev.off()
# plot cox
pdf(paste0(PARAM$folder.result, "RSF_overview.pdf"),
width = 10,
height = 5)
par(oma = c(0.5, 0.5, 0.5, 0.5))
plot.survival(rf1, cens.model = "rfsrc")
dev.off()
pdf(paste0(PARAM$folder.result, "RSF_overview.pdf"),
width = 10,
height = 8)
par(oma = c(0.5, 0.5, 0.5, 0.5))
plot.survival(rf1, cens.model = "rfsrc")
dev.off()
data=data
pbc.f <- as.formula("Survrsf(Event_time, Event)~.")
pbc.out <- rsf(pbc.f, pbc, ntree=ntree,
splitrule = "logrankapprox", forest=T)
??Survrsf
?Survrsf
??Survrsf
pbc.out <- rfsrc(pbc.f, pbc, ntree=ntree,
splitrule = "logrankapprox", forest=T)
rf1 <- rfsrc(Surv(Event_time, Event) ~ .,
data = dff1,
importance = FALSE, splitrule = "logrankapprox", forest=T)
rf1 <- rfsrc(Surv(Event_time, Event) ~ .,
data = dff1,
importance = FALSE, forest=T)
plot(pbc.out)
plot(rf1)
vimpCI <- extract.subsample(rf1)$var.jk.sel.Z
oo <- subsample(rf1, verbose = FALSE)
# take a delete-d-jackknife procedure for example
vimpCI <- extract.subsample(oo)$var.jk.sel.Z
vimpCI
plot.subsample(oo)
rfsrc(Event~.,dff1,importance=TRUE)$importance
rfsrc(Surv(Event_time, Event) ~ .,
data = dff1,
importance = TRUE)$importance
a <- rfsrc(Surv(Event_time, Event) ~ .,
data = dff1,
importance = TRUE)$importance
plot(a)
plot(a)
rfsrc(Surv(Event_time, Event) ~ .,
data = dff1,
importance = TRUE)$importance
a
plot(rf1)
a <- rfsrc(Surv(Event_time, Event) ~ .,
data = dff1,
importance = TRUE)$importance
a
class(a)
rownames(a)
